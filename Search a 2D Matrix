
// brute force
int search(int mat[4][4], int n, int x)
{
    if (n == 0)
        return -1;
 
    // traverse through the matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            // if the element is found
            if (mat[i][j] == x) {
                cout << "Element found at (" << i << ", "
                     << j << ")\n";
                return 1;
            }
    }
 
    cout << "n Element not found";
    return 0;
}



// optimal 
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = matrix.size();
        int col = matrix[0].size();

        int start =0;
        int end = row*col-1;

        int mid = start+(end-start)/2;

        while(start<=end){

            int element = matrix[mid/col][mid%col];

            if(element==target){
                return true;
            }

             if(element>target){
                end = mid-1;
            }
            else{
                start= mid+1;
            }

            mid = start + (end-start)/2; 
        }
        return 0;
    }
};




